!function(m){var e,t;(e={init:function(){this._menu(),this._menuMobile(),this._stickyBarTop(),this._switchLang(),this._search(),this._sliders(),this._moreAcces(),this._formValidation(),this._goToTop(),this._equalizer(),this._menuIntro(),this._accDispatch(),this._accOffresEmplois(),this._customInputFile(),this._searchMobile(),this._hasFnd(),this._selcetCustom(),this._planSite(),this._imgToSvg(),this._titleIframe()},_menu:function(){m(".icon-menu").click(function(e){e.stopPropagation(),m(this).parent().hasClass("open")?(m(this).attr("aria-expanded","false"),m(".main-menu").removeClass("in"),m("body").removeClass("ds-scroll")):(m(this).attr("aria-expanded","true"),m(".main-menu").addClass("in"),m("body").addClass("ds-scroll")),m(this).parent().toggleClass("open"),m(".menu-main").toggleClass("in"),m(".mask-menu").toggleClass("in"),m(".sub-menu").removeClass("in")}),m(".mask-menu").click(function(){m(".icon-menu").trigger("click")}),m(".btn-menu").click(function(){m(".icon-menu").trigger("click")}),m(".menu-item--expanded").mouseover(function(){m(this).find("a[aria-expanded]:first-child").attr("aria-expanded","true")}),m(".menu-item--expanded a").focus(function(){m(this).parent().siblings().removeClass("show"),m(this).parent().siblings().find("a[aria-expanded]").attr("aria-expanded","false")}),m("a").focusin(function(e){0===m(e.target).closest(".main-menu").length&&0===m(e.target).closest(".menu-mobile").length&&(m(".btn-menu").removeClass("open"),m(".menu-main").removeClass("in"),m(".mask-menu").removeClass("in"),m(".sub-menu").removeClass("in"))}),m(".menu-item--expanded>a").click(function(e){e.preventDefault(),m(this).hasClass("open")?(m(this).removeClass("open"),m(this).parent().removeClass("show"),m(this).attr("aria-expanded","false")):(m(this).parent().siblings().find("a").removeClass("open"),m(this).parent().addClass("show"),m(this).attr("aria-expanded","true"),m(this).addClass("open"))}),m(".menu-item--expanded").mouseenter(function(){$this=m(this),setTimeout(function(){$this.addClass("show")},150),m(this).find("a[aria-expanded]").attr("aria-expanded","ture"),console.log("add class")}),m(".menu-item--expanded").mouseleave(function(){m(this).removeClass("show"),m(this).find("a[aria-expanded]").attr("aria-expanded","false")}),"ontouchstart"in window&&(m(".menu-item--expanded").unbind("focus mouseenter mouseleave mouseover"),m(".menu-item--expanded a").unbind("focus click mouseenter mouseleave mouseover"),m(".menu-item--expanded").click(function(){m(this).hasClass("show")?(m(this).removeClass("show"),m(this).find(".sub-menu").removeClass("in"),m(this).find("a[aria-expanded]").attr("aria-expanded","false")):(m(this).siblings().removeClass("show"),m(this).siblings().find("a[aria-expanded]").attr("aria-expanded","false"),m(this).addClass("show"),m(this).find("a[aria-expanded]").attr("aria-expanded","ture"))}),m(".menu-item--expanded>a").on("click",function(e){e.preventDefault(),m(this).parents("ul").hasClass("menu-1")||m(".sub-menu").removeClass("in"),m(this).next().addClass("in")}),m(".menu-1 .menu-item--expanded>a").on("click",function(e){if(event.stopPropagation(),m(this).parents("ul").hasClass("menu-1"))if(e.preventDefault(),1==m(this).next(".sub-menu").parents(".sub-menu").length&&console.log("open .menu-item--expanded"),m(this).hasClass("open"))m(window).width()<768&&$elm.animate({scrollTop:0},500),m(this).removeClass("open"),m(this).next().removeClass("in");else if(m(".menu-item--expanded a").removeClass("open"),m(".sub-menu .sub-menu").removeClass("in"),m(this).addClass("open"),m(this).next().addClass("in"),$elm=m(this).parents(".sub-menu"),m(window).width()<768){var t=132+61*m(this).parent().index();$elm.animate({scrollTop:t},500)}})),m("#app-bar").length&&(m("body").addClass("with-appbar"),m("#app-close").on("click",function(){m("body").removeClass("with-appbar")}))},_menuMobile:function(){m(".btn-menu-mobile").on("click",function(e){e.preventDefault(),e.stopPropagation(),m(this).toggleClass("open"),m(".menu-main").hasClass("in")?m(".menu-main").removeClass("in"):(m(".menu-main").addClass("in"),m(".btn-services").removeClass("active"),m(".services-mob").removeClass("in"))}),m(".back-menu").on("click",function(e){e.preventDefault(),m(this).parent().removeClass("in"),m(".menu-item--expanded a").removeClass("open"),m(".sub-menu .sub-menu").removeClass("in")}),m(document).on("click",".btn-services",function(e){e.preventDefault(),m(this).toggleClass("active"),m(".services-mob").toggleClass("in")})},_stickyBarTop:function(){var i=m(".header-top").height();m(window).scroll(function(e){var t=m(this).scrollTop();i<=t?m(".header-top").addClass("fixed"):m(".header-top").removeClass("fixed")})},_switchLang:function(){m(".c-langue .dec-switch").on("click",function(){m(this).parent().toggleClass("open")})},_search:function(){m('.c-search input[type="text"]').focusin(function(){m(this).addClass("in"),m(this).parents(".c-search").find(".c-sugger").addClass("in")}),m("a").focusin(function(e){0===m(e.target).closest(".c-search").length&&(m('.c-search input[type="text"]').removeClass("in"),m(".c-sugger").removeClass("in"))}),m(document).mouseup(function(e){var t=m(".c-search");t.is(e.target)||0!==t.has(e.target).length||(m('.c-search input[type="text"]').removeClass("in"),m(".c-sugger").removeClass("in"))})},_sliders:function(){0<m(".actus_slider").length&&m(".actus_slider").slick({slidesToShow:1,slidesToScroll:1,autoplay:!1,autoplaySpeed:3e3,prevArrow:"<button class='slick-prev slick-arrow' type='button'>Previous</button>",nextArrow:"<button class='slick-next slick-arrow' type='button'>Next</button>",responsive:[{breakpoint:767,settings:{arrows:!1,infinite:!1,dots:!0}}]}),0<m(".slider-acces").length&&(m(".slider-acces").slick({slidesToScroll:1,autoplay:!1,autoplaySpeed:2e3,accessibility:!1,responsive:[{breakpoint:9999,settings:"unslick"},{breakpoint:768,settings:{slidesToScroll:1,slidesToShow:3,infinite:!1,variableWidth:!0,dots:!1}}]}),m(window).resize(function(){0<m(".slider-acces.slick-initialized").length&&m(".slider-acces.slick-initialized").slick("unslick"),m(".slider-acces").slick({slidesToScroll:1,autoplay:!1,autoplaySpeed:2e3,accessibility:!1,responsive:[{breakpoint:9999,settings:"unslick"},{breakpoint:767,settings:{slidesToScroll:1,slidesToShow:3,infinite:!1,variableWidth:!0,dots:!1}}]})})),0<m(".sliderGalerie").length&&m(".sliderGalerie").slick({slidesToScroll:1,slidesToShow:1,autoplay:!1,variableWidth:!0,autoplaySpeed:2e3,appendArrows:m(".navSlder"),responsive:[{breakpoint:767,settings:{infinite:!1,variableWidth:!1,arrows:!1,centerMode:!1,dots:!0}}]})},_moreAcces:function(){m(window).width()<=768&&5<m(".first-list .col-sm-2").length&&m(".c-list-acces-plus .row").prepend(m(".slider-acces .col-sm-2:last-child")),m(window).resize(function(){m(window).width()<=768&&5<m(".first-list .col-sm-2").length&&m(".c-list-acces-plus .row").prepend(m(".slider-acces .col-sm-2:last-child"))}),m(".main-search .c-more-acces .bouton_niv3,.inner-intro .c-more-acces .bouton_niv3").on("click",function(e){e.preventDefault(),m(this).hasClass("in")?(m(this).removeClass("in"),m(this).parent().parent().removeClass("in"),m(".c-list-acces-plus").slideUp(),m(this).attr("aria-expanded","true")):(m(this).addClass("in"),m(".c-list-acces-plus").slideDown(),m(this).attr("aria-expanded","false"),m(this).parent().parent().addClass("in"))})},_moreactus:function(){var t,i=4;m(window).width()<1200&&767<m(window).width()?i=3:m(window).width()<768&&500<m(window).width()&&(i=2),setTimeout(function(){m(m("#actus_content .actus_content-item .img")[i]).attr("id","ActusNextFocus"),m("#actus_content").height(),m("#actus_content .actus_content-item").each(function(e){i-1<e&&m(this).hide()}),t=m("#actus_content .actus_content-item").height(),m(window).width()<501&&(t=0,m("#actus_content .actus_content-item").each(function(e){e<4&&(t+=m(this).height()+66)})),m("#actus_content").height(t)},10)},_formValidation:function(){m("#edit-submitted-curriculum-vitae-upload").length&&m("#edit-submitted-curriculum-vitae-upload").addClass("required"),m("#edit-submitted-telephone-fixe").length&&m("#edit-submitted-telephone-fixe").addClass("phone-group"),m("#edit-submitted-telephone-portable").length&&m("#edit-submitted-telephone-portable").addClass("phone-group"),m("#edit-submitted-employe-service-publique-1").length&&m("#edit-submitted-employe-service-publique-1").addClass("required"),m("#edit-submitted-employe-service-publique-2").length&&m("#edit-submitted-employe-service-publique-2").addClass("required"),jQuery.validator.addMethod("sizeFile",function(e,t){return!(2097152<m(t)[0].files[0].size)},"Votre fichier ne doit pas peser plus de 2 Mo"),m("#news-app-form").validate({rules:{mail:{required:!0,email:!0}},messages:{mail:{required:"Ce champ est obligatoire.",email:"L’adresse mail n’est pas valide."}}}),m.validator.methods.email=function(e,t){return this.optional(t)||/^[._A-Za-z0-9-]+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/.test(e)},m.extend(m.validator.messages,{required:"Ce champ est obligatoire.",email:"L’adresse mail n’est pas valide.",step:"Veuillez saisir un multiple de 1.",require_from_group:"Veuillez remplir au moins 1 de ces champs."}),m("#webform-client-form-4274").length&&m("#edit-submitted-telephone-fixe").length&&m("#webform-client-form-4274").validate({rules:{"submitted[telephone_fixe]":{require_from_group:[1,".phone-group"]},"submitted[telephone_portable]":{require_from_group:[1,".phone-group"]}}}),m(".webform-client-form").validate()},_goToTop:function(){m(".goToTop").click(function(){m("html, body").animate({scrollTop:0},700)})},_iframeclick:function(){0<m(".image-video").length&&m(".image-video").each(function(e){m(this).on("click",function(){var e=m(this).next(),t=m(e).attr("data-src");t+="?autoplay=1";var i=m(e).attr("data-height"),n=m(this).find("img").height();m(e).css("height",n),m(this).hide();var s=document.createElement("iframe");m(s).attr("src",t),m(s).attr("height",i),m(s).attr("frameborder",0),m(s).attr("allow","autoplay"),m(s).prop("allowfullscreen"),m(e).html(s),m(e)()})})},_equalizer:function(){0<m(".desc-webcams").length&&m(".desc-webcams").matchHeight()},_menuIntro:function(){m(".intro-menu").on("click",function(e){m(this).hasClass("opened")?m(this).find("button").attr("aria-expanded","false"):m(this).find("button").attr("aria-expanded","true"),m(this).toggleClass("opened")}),m("a").focusin(function(e){0===m(e.target).closest(".c-breadcrumb").length&&(m(".intro-menu").removeClass("opened"),m("intro-menu").find("button").attr("aria-expanded","true"))})},_accDispatch:function(){m(".toggleDispatch").click(function(e){e.preventDefault();var t=m(this);t.parent().parent().hasClass("show")?(t.parent().parent().removeClass("show"),t.attr("aria-expanded","false"),t.parent().next().slideUp(350),t.removeClass("open")):(t.parents(".list-dispatch").find(".links-dispatch").removeClass("show"),t.parents(".list-dispatch").find(".toggleDispatch").attr("aria-expanded","false"),t.parents(".list-dispatch").find(".toggleDispatch").removeClass("open"),t.parents(".list-dispatch").find("ul").slideUp(350),t.parent().parent().toggleClass("show"),t.parent().next().slideToggle(350),t.attr("aria-expanded","true"),t.addClass("open"))}),m(".default-accordion").length&&m(".card-header").click(function(e){e.preventDefault();var t=m(this);t.parent().hasClass("show")?(t.parent().removeClass("show"),t.attr("aria-expanded","false"),t.parent().next().slideUp(350),t.removeClass("open")):(t.parent().toggleClass("show"),t.parent().next().slideToggle(350),t.attr("aria-expanded","true"),t.addClass("open"))})},_accOffresEmplois:function(){if(m(".toggleOffresEpmlois").length)for(var e=m(".toggleOffresEpmlois"),t=0,i=e.length;t<i;t++)e[t].setAttribute("tabindex","0");m(document).on("click",".toggleOffresEpmlois",function(e){e.preventDefault();var t=m(this);t.parent().hasClass("show")?(t.parent().removeClass("show"),t.attr("aria-expanded","false"),t.parent().next().slideUp(350),t.removeClass("open")):(console.log(t.parent()),t.parents(".liste-offres").find(".toggleOffresEpmlois").removeClass("show"),t.parents(".liste-offres").find(".toggleOffresEpmlois").attr("aria-expanded","false"),t.parents(".liste-offres").find(".toggleOffresEpmlois").removeClass("open"),t.parents(".liste-offres").find(".ui-widget-content").slideUp(350),t.parent().toggleClass("show"),t.parent().next().slideToggle(350),t.attr("aria-expanded","true"),t.addClass("open"))})},_searchMobile:function(){m('.search-bloc input[type="text"]').focusin(function(){m(this).parents(".search-bloc").addClass("searchStiky")}),m(".close-search,.btn-reset").on("click",function(){m(this).parent().find('input[type="text"]').attr("value",""),m(this).parent().find('input[type="text"]').focus()}),m(".back-search").on("click",function(){m(this).parents(".search-bloc").removeClass("searchStiky"),m(this).parents(".search-bloc").find(".c-sugger").removeClass("in"),m(".c-sugger").removeClass("in"),m("#rechercheMobile").removeClass("in"),0==m('.search-bloc input[type="text"]').val().length&&m(".search-bloc .btn-reset").hide()}),m(".btn-search-mob").on("click",function(){m(".main-search-mobile").addClass("searchStiky"),m(".main-search-mobile").find('input[type="text"]').focus(),m(this).attr("aria-expanded","true")}),m('.search-main-mobile input[type="text"]').on("click",function(){m(".main-search-mobile").addClass("searchStiky"),m(".main-search-mobile").find('input[type="text"]').focus(),m(this).attr("aria-expanded","true")})},_hasFnd:function(){m(".hasFnd .img").each(function(){var e=m(this).find("img").attr("src");m(this).css("background-image","url('"+e+"')")})},_controlVideo:function(){var n="#main-video",s="",e=768<m(window).width(),a=!0,r=!1,o=!1,l=!1,c=m(n).attr("src");if(0==m(n).length&&e&&m(".main-video-inner").append(t),0<m(n).length&&e){var d=function(e){if(l){var t=!(!(n=c.match(/^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/))||11!=n[7].length)&&n[7],i="?rel=0&enablejsapi=1"+s+"&version=3&loop=1&controls=0&showinfo=0&playsinline=1&playlist="+t;m(e).attr("src","https://www.youtube.com/embed/"+t+i)}else m(e).attr({autoplay:s}),m(e)[0].play();var n};function u(e){var t=m(n);if(t[0]){var i=t[0].getAttribute("src");i&&-1!=i.indexOf("youtube.com/embed")&&t[0].contentWindow.postMessage(JSON.stringify({event:"command",func:e,args:""}),"*")}}var p=function(e){m(e).toggleClass("pause"),a=a?(l?u("pauseVideo"):m(n)[0].pause(),!1):(l?u("playVideo"):m(n)[0].play(),!0)};m(window).on("load",function(){var t,i;m(".form-submit[id^=edit-reset]").on("click keypress",function(e){e.preventDefault(),location.href=location.origin+location.pathname}),t=700,i=!0,m(window).width()<1024&&(t=440),m(document).scrollTop()<t&&(c&&-1!=c.indexOf("youtube.com/embed")&&(l=!0),l&&(s="&autoplay=1"),i=!1,d(n)),m(window).scroll(function(){var e=m(document).scrollTop();e<t&&i&&(l&&(s="&autoplay=1"),d(n),i=!1),e<t&&!a&&!i&&!o?p("#play-pause"):t<=e&&a&&!i&&!o&&p("#play-pause")}),m("#play-pause").click(function(){o=!o,p(this)}),m("#mute-unMute").click(function(){m(this).toggleClass("mute"),r=r?(l?u("unMute"):m(n)[0].muted=!1,!1):(l?u("mute"):m(n)[0].muted=!0,!0)})})}else 0<m(n).length&&(t=m(n).detach())},_selcetCustom:function(){m(document).ajaxComplete(function(e,t,i){if(console.log(i.url),i.url.includes("views/ajax")){console.log("reloded fron file");m(".form-select").selectric({nativeOnMobile:!1,onChange:function(e){m(this).trigger("change"),m(".form-select").prop("disabled",!1),m(".form-select").selectric("refresh"),""!=e.value&&m(".selectric label.error").remove()}})}});m(".form-select").selectric({nativeOnMobile:!1,onChange:function(e){m(this).trigger("change"),m(".form-select").prop("disabled",!1),m(".form-select").selectric("refresh"),""!=e.value&&m(".selectric label.error").remove()}});m(".form-select").on("change",function(){})},_reloadFiltre:function(){m(".offres-emplois form select ").selectric({nativeOnMobile:!1})},_planSite:function(){jQuery(".site-map-box-menu .content > .site-map-menu > .first").next(".expanded").find("> .site-map-menu").each(function(){jQuery(this).find("> li").find("h3").contents().unwrap().wrap("<h2/>")}),jQuery(".site-map-box-menu .content > .site-map-menu > .first").next(".expanded").find("> ul.site-map-menu > li.expanded").appendTo(".site-map-box-menu .content > .site-map-menu"),jQuery(".site-map-box-menu .content > .site-map-menu > .first").next(".expanded").remove(),m(".site-map-menu>li>h2>a").each(function(){m(this).closest("li").children("ul").length&&m(this).attr({"aria-expanded":"false","aria-haspopup":"true"})}),m(".site-map-menu>li>h2>a").click(function(e){m(this).closest("li").children("ul").length&&(e.preventDefault(),m(this).parent().parent().hasClass("open")?(m(this).attr("aria-expanded","false"),m(this).parent().parent().removeClass("open"),m(this).parent().next().slideUp()):(m(this).attr("aria-expanded","true"),m(this).parent().parent().addClass("open"),m(this).parent().next().slideDown()))});var e=m(".c-inner-intro .content > .site-map-menu").children().length,t=parseInt(e)/parseInt(2);for(m("<ul class='mainMenuscend'></ul").appendTo(".c-inner-intro .content"),i=e;i>=t;i--)m(".mainMenuscend").prepend(m(".c-inner-intro .content > .site-map-menu").children().eq(i))},_customInputFile:function(){m('.webform-client-form input[type="file"]').length&&m('.webform-client-form input[type="file"]').each(function(e){m(this).parent().append('<div class="c-elementFile"></div>'),m(this).parent().find(".c-elementFile").append('<button class="input-file-trigger bouton_niv1" type="button">Parcourir</div>'),m(this).parent().find(".c-elementFile").append('<p class="file-return"></p>');var t=m(this).parent().find(".form-file"),i=m(this).parent().find(".c-elementFile .input-file-trigger");m(this).parent().find(".c-elementFile .file-return");i.on("keydown",function(e){e.preventDefault(),13!=e.keyCode&&32!=e.keyCode||m(this).parent().prev().find('input[type="file"]').focus()}),i.on("click",function(e){return e.preventDefault(),m(this).parents(".webform-component-file").find('input[type="file"]').focus(),m(this).parents(".webform-component-file").find('input[type="file"]').click(),!1}),t.on("change",function(e){m(this).parents(".webform-component-file").find(".file-return").text(/[^\\]*$/.exec(m(this)[0].value)[0])})})},_imgToSvg:function(){m(".picto-svg img").each(function(){var i=jQuery(this),n=i.attr("id"),s=i.attr("class"),e=i.attr("src");m.get(e,function(e){var t=m(e).find("svg");void 0!==n&&(t=t.attr("id",n)),void 0!==s&&(t=t.attr("class",s+" replaced-svg")),!(t=t.removeAttr("xmlns:a")).attr("viewBox")&&t.attr("height")&&t.attr("width")&&t.attr("viewBox","0 0 "+t.attr("height")+" "+t.attr("width")),i.replaceWith(t)},"xml")})},_wrapFiltre:function(){m(".views-submit-button").length&&m(".views-reset-button").length&&!m(".resetformbtn").length&&m(".views-submit-button,.views-reset-button").wrapAll('<div class="resetformbtn"></div>')},_titleIframe:function(){m("iframe").attr("title","iframe-marseille")}})._reloadFiltre(),e._wrapFiltre(),m(document).ready(function(){m(".c-sugger ul a").click(function(e){}),e._controlVideo()}),m(document).ajaxComplete(function(){e._wrapFiltre(),e._reloadFiltre()}),jQuery(window).on("load",function(){e.init(),0<m(".actus_slider").length&&m(".actus_slider").addClass("enableHeight"),jQuery.validator.addMethod("regex_email",function(e,t,i){return i.constructor!=RegExp?i=new RegExp(i):i.global&&(i.lastIndex=0),this.optional(t)||i.test(e)}),0<jQuery("#newsletter-subscription-form").length&&(m.extend(m.validator.messages,{regex_email:"Veuillez fournir une adresse électronique valide."}),jQuery("#newsletter-subscription-form").validate({rules:{"aside-newsletter":{required:!0,regex_email:/^[._A-Za-z0-9-]+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/}},submitHandler:function(e){var t=jQuery("#newsletter-subscription-form #aside-newsletter").val();return jQuery.ajax({type:"POST",url:"/ajax/newsletter/"+t,dataType:"json",cache:!1,success:function(e){m("#newsletter-subscription-form").remove(),m(".news_description").remove(),m(".news").append("<p class='success-message'>Merci pour votre inscription !</p>")},error:function(e,t,i){return!1}}),!1}}))}),m(window).resize(function(){e._controlVideo()}),m(".list-result .pagination").remove(),Drupal.behaviors.readMoreAjax={attach:function(e,t){m(".read-more-ajax",e).click(function(e){e.preventDefault();var t=m(".pagination .pager-next a").attr("href"),i=m(".pagination .pager-last a").attr("href");m(".c-more-acces .wraper-link").append('<div class="lds-ring"><div></div><div></div><div></div><div></div></div>'),m.get(t,function(e){m(e).find(".search-results").insertAfter(m(".search-results")),m(".search-results .pagination").remove(),t==i?m(".read-more-ajax").remove():(m(e).find(".search-results .pager").appendTo(m(".search-results")),Drupal.attachBehaviors(m(".search-results")))}).always(function(){m(".lds-ring").remove()})}),m(".item-list .pagination").hide()}}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
